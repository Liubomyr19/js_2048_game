{"version":3,"sources":["scripts/main.js"],"names":["board","button","document","querySelector","startMessage","scoreText","field","winMessage","loseMessage","BOARD_SIZE","INITIAL_CELL_VALUE","WINNING_NUMBER","score","filterZero","row","filter","num","compareFields","prevBoard","boards","JSON","stringify","slide","newRow","i","length","splice","push","hasEmptyCell","r","c","renderField","rows","cells","className","classList","add","textContent","spawnRandomCell","found","randomRowIndex","Math","floor","random","randomColIndex","transposeField","currentField","transposedBoard","map","_","colIndex","moveLeft","transposedField","moveRight","reverse","moveUp","newField","moveDown","winGame","j","checkFields","fieldToCheck","gameOver","boardToCheck","newDesk","addEventListener","contains","remove","Array","from","fill","e","parse","key"],"mappings":";AAAA,aAEA,IAUIA,EAVEC,EAASC,SAASC,cAAc,WAChCC,EAAeF,SAASC,cAAc,kBACtCE,EAAYH,SAASC,cAAc,eACnCG,EAAQJ,SAASC,cAAc,eAC/BI,EAAaL,SAASC,cAAc,gBACpCK,EAAcN,SAASC,cAAc,iBACrCM,EAAa,EACbC,EAAqB,EACrBC,EAAiB,KAGnBC,EAAQ,EAENC,EAAa,SAACC,GACXA,OAAAA,EAAIC,OAAO,SAAAC,GAAOA,OAAQ,IAARA,KAGrBC,EAAgB,SAACC,EAAWC,GACzBC,OAAAA,KAAKC,UAAUH,KAAeE,KAAKC,UAAUF,IAGhDG,EAAQ,SAACR,GAGR,IAFCS,IAAAA,EAASV,EAAWC,GAEjBU,EAAI,EAAGA,EAAID,EAAOE,OAAS,EAAGD,IACjCD,EAAOC,KAAOD,EAAOC,EAAI,KAC3BD,EAAOC,IAAM,EACbD,EAAOG,OAAOF,EAAI,EAAG,GACrBZ,GAASW,EAAOC,IAIbD,KAAAA,EAAOE,OAAShB,GACrBc,EAAOI,KAAK,GAGPJ,OAAAA,GAGHK,EAAe,WACd,IAAA,IAAIC,EAAI,EAAGA,EAAIpB,EAAYoB,IACzB,IAAA,IAAIC,EAAI,EAAGA,EAAIrB,EAAYqB,IAC1B9B,GAAgB,IAAhBA,EAAM6B,GAAGC,GACJ,OAAA,EAKN,OAAA,GAGHC,EAAc,WACb,IAAA,IAAIF,EAAI,EAAGA,EAAIpB,EAAYoB,IACzB,IAAA,IAAIC,EAAI,EAAGA,EAAIrB,EAAYqB,IAC9BxB,EAAM0B,KAAKH,GAAGI,MAAMH,GAAGI,UAAY,GAEnC5B,EAAM0B,KAAKH,GAAGI,MAAMH,GAAGK,UAAUC,IAC/B,aACepC,eAAAA,OAAAA,EAAM6B,GAAGC,KAE1BxB,EAAM0B,KAAKH,GAAGI,MAAMH,GAAGO,YAAcrC,EAAM6B,GAAGC,IAAM,IAKpDQ,EAAkB,WAClB,GAACV,IAME,IAFHW,IAAAA,GAAQ,GAEJA,GAAO,CACPC,IAAAA,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWlC,GAC5CmC,EAAiBH,KAAKC,MAAMD,KAAKE,SAAWlC,GAEJ,IAA1CT,EAAMwC,GAAgBI,KACxB5C,EAAMwC,GAAgBI,GAAkBlC,EACxCqB,IAEAQ,GAAQ,KAKRM,EAAiB,SAACC,GAClBC,IAAAA,EAAkBD,EAQfC,OANPA,EAAkBA,EAAgB,GAAGC,IACnC,SAACC,EAAGC,GAAaH,OAAAA,EAAgBC,IAC/B,SAAAlC,GAAOA,OAAAA,EAAIoC,QAOXC,EAAW,WACV,IADWC,IAAAA,EAAkBpD,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EACzB6B,EAAI,EAAGA,EAAIpB,EAAYoB,IAAK,CAC/Bf,IAAAA,EAAMsC,EAAgBvB,GAE1Bf,EAAMQ,EAAMR,GACZsC,EAAgBvB,GAAKf,IAInBuC,EAAY,WACX,IADYD,IAAAA,EAAkBpD,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAC1B6B,EAAI,EAAGA,EAAIpB,EAAYoB,IAAK,CAC/Bf,IAAAA,EAAMsC,EAAgBvB,GAAGyB,UAE7BxC,EAAMQ,EAAMR,GACZsC,EAAgBvB,GAAKf,EAAIwC,YAIvBC,EAAS,WACPC,IAAAA,EAAWX,EAAe7C,GAEhCmD,EAASK,GAETxD,EAAQ6C,EAAeW,IAGnBC,EAAW,WACTD,IAAAA,EAAWX,EAAe7C,GAEhCqD,EAAUG,GAEVxD,EAAQ6C,EAAeW,IAGnBE,EAAU,WACT,IAAA,IAAIlC,EAAI,EAAGA,EAAIf,EAAYe,IACzB,IAAA,IAAImC,EAAI,EAAGA,EAAIlD,EAAYkD,IAC1B3D,GAAAA,EAAMwB,GAAGmC,KAAOhD,EACX,OAAA,GAMTiD,EAAc,SAACC,GACd,IAAA,IAAIrC,EAAI,EAAGA,EAAIf,EAAYe,IACzB,IAAA,IAAImC,EAAI,EAAGA,EAAIlD,EAAa,EAAGkD,IAC9BE,GAAAA,EAAarC,GAAGmC,KAAOE,EAAarC,GAAGmC,EAAI,GACtC,OAAA,EAKN,OAAA,GAGHG,EAAW,SAACC,GACZnC,GAAAA,IACK,OAAA,EAGHoC,IAAAA,EAAUnB,EAAekB,GAE3BH,OAAAA,EAAYG,KAAiBH,EAAYI,IAO/C/D,EAAOgE,iBAAiB,QAAS,WAC3BhE,EAAOkC,UAAU+B,SAAS,UAC5BjE,EAAOkC,UAAUgC,OAAO,SACxBlE,EAAOkC,UAAUC,IAAI,WACrBnC,EAAOoC,YAAc,UACrBjC,EAAa+B,UAAUC,IAAI,YAE3B7B,EAAW4B,UAAUC,IAAI,UACzB5B,EAAY2B,UAAUC,IAAI,WAG5BpC,EAAQoE,MAAMC,KAAK,CAAE5C,OAAQhB,GAAc,WAAM2D,OAAAA,MAAM3D,GAAY6D,KAAK,KAExE1D,EAAQ,EACRP,EAAUgC,YAAczB,EAExB0B,IACAA,MAGFpC,SAAS+D,iBAAiB,UAAW,SAACM,GAKhCb,GAJAI,EAAS9D,IACXQ,EAAY2B,UAAUgC,OAAO,UAG3BT,IACFnD,EAAW4B,UAAUgC,OAAO,UAE5BnE,EAAQoE,MAAMC,KACZ,CAAE5C,OAAQhB,GAAc,WAAM2D,OAAAA,MAAMC,KAAK,CAAE5C,OAAQhB,GAAc,WACxDgC,OAAAA,KAAKE,SAAW,GAAM,EAAI,MAGrCZ,QACK,CACCb,IAAAA,EAAYE,KAAKoD,MAAMpD,KAAKC,UAAUrB,IAEpCuE,OAAAA,EAAEE,KACH,IAAA,YACHtB,IACA,MAEG,IAAA,aACHE,IACA,MAEG,IAAA,UACHE,IACA,MAEG,IAAA,YACHE,IAIAxC,EAAcC,EAAWlB,IAC3BsC,IAGFP,IAGF1B,EAAUgC,YAAczB","file":"main.46d4ce93.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst scoreText = document.querySelector('.game-score');\nconst field = document.querySelector('.game-field');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst BOARD_SIZE = 4;\nconst INITIAL_CELL_VALUE = 2;\nconst WINNING_NUMBER = 2048;\n\nlet board;\nlet score = 0;\n\nconst filterZero = (row) => {\n  return row.filter(num => num !== 0);\n};\n\nconst compareFields = (prevBoard, boards) => {\n  return JSON.stringify(prevBoard) !== JSON.stringify(boards);\n};\n\nconst slide = (row) => {\n  const newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow.splice(i + 1, 1);\n      score += newRow[i];\n    }\n  }\n\n  while (newRow.length < BOARD_SIZE) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nconst hasEmptyCell = () => {\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    for (let c = 0; c < BOARD_SIZE; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst renderField = () => {\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    for (let c = 0; c < BOARD_SIZE; c++) {\n      field.rows[r].cells[c].className = '';\n\n      field.rows[r].cells[c].classList.add(\n        'field-cell',\n        `field-cell--${board[r][c]}`\n      );\n      field.rows[r].cells[c].textContent = board[r][c] || '';\n    }\n  }\n};\n\nconst spawnRandomCell = () => {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const randomRowIndex = Math.floor(Math.random() * BOARD_SIZE);\n    const randomColIndex = Math.floor(Math.random() * BOARD_SIZE);\n\n    if (board[randomRowIndex][randomColIndex] === 0) {\n      board[randomRowIndex][randomColIndex] = INITIAL_CELL_VALUE;\n      renderField();\n\n      found = true;\n    }\n  }\n};\n\nconst transposeField = (currentField) => {\n  let transposedBoard = currentField;\n\n  transposedBoard = transposedBoard[0].map(\n    (_, colIndex) => transposedBoard.map(\n      row => row[colIndex]\n    )\n  );\n\n  return transposedBoard;\n};\n\nconst moveLeft = (transposedField = board) => {\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    let row = transposedField[r];\n\n    row = slide(row);\n    transposedField[r] = row;\n  }\n};\n\nconst moveRight = (transposedField = board) => {\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    let row = transposedField[r].reverse();\n\n    row = slide(row);\n    transposedField[r] = row.reverse();\n  }\n};\n\nconst moveUp = () => {\n  const newField = transposeField(board);\n\n  moveLeft(newField);\n\n  board = transposeField(newField);\n};\n\nconst moveDown = () => {\n  const newField = transposeField(board);\n\n  moveRight(newField);\n\n  board = transposeField(newField);\n};\n\nconst winGame = () => {\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      if (board[i][j] === WINNING_NUMBER) {\n        return true;\n      }\n    }\n  }\n};\n\nconst checkFields = (fieldToCheck) => {\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE - 1; j++) {\n      if (fieldToCheck[i][j] === fieldToCheck[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst gameOver = (boardToCheck) => {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  const newDesk = transposeField(boardToCheck);\n\n  if (checkFields(boardToCheck) || checkFields(newDesk)) {\n    return false;\n  }\n\n  return true;\n};\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n\n  board = Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(0));\n\n  score = 0;\n  scoreText.textContent = score;\n\n  spawnRandomCell();\n  spawnRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (gameOver(board)) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (winGame()) {\n    winMessage.classList.remove('hidden');\n\n    board = Array.from(\n      { length: BOARD_SIZE }, () => Array.from({ length: BOARD_SIZE }, () => {\n        return Math.random() < 0.9 ? 2 : 4;\n      }));\n\n    renderField();\n  } else {\n    const prevBoard = JSON.parse(JSON.stringify(board));\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n\n      case 'ArrowRight':\n        moveRight();\n        break;\n\n      case 'ArrowUp':\n        moveUp();\n        break;\n\n      case 'ArrowDown':\n        moveDown();\n        break;\n    }\n\n    if (compareFields(prevBoard, board)) {\n      spawnRandomCell();\n    }\n\n    renderField();\n  }\n\n  scoreText.textContent = score;\n});\n"]}